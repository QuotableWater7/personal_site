.row
  .col-md-12
    %h4 Observer Pattern
    %p I'm trying to deepen my understanding of how Ruby metaprogramming works, and here is my attempt at a common design pattern.
    :coderay
      #!ruby

      module Publisher
        module ClassMethods
          def publish(*args)
            meth = args.shift
            subscribers.each { |subscriber| subscriber.send(meth, name, *args) }
          end

          def subscribe(subscriber)
            subscribers << subscriber
          end

          def unsubscribe(subscriber)
            subscribers.delete(subscriber)
          end
        end

        def self.included(base)
          base.class_eval do
            include ClassMethods
            send(:attr_accessor, :subscribers, :name)
          end
        end
      end

      module Subscriber
        def subscribe_to(meth, handle_with: :method_missing)
          define_method(meth) { |*args| send(handle_with, *args) }
        end
      end

      module NewspaperSubscriber
        def read_news(newspaper, news)
          puts "\#{newspaper} says: \#{news}"
        end

        def self.included(base)
          base.send :extend, Subscriber
          base.send :subscribe_to, :print_news, handle_with: :read_news
        end
      end

      class Newspaper
        include Publisher

        def initialize(name)
          self.subscribers = []
          self.name = name
        end
      end

      class Person
        include NewspaperSubscriber
      end

      boston_globe = Newspaper.new('Boston Globe')
      hudson_sun = Newspaper.new('Hudson Sun')
      sports_fan = Person.new

      [boston_globe, hudson_sun].each { |newspapah| newspapah.subscribe(sports_fan) }

      boston_globe.publish(:print_news, 'It now costs $300 to see a Sox game.')
      # Boston Globe says: It now costs $300 to see a Sox game!

      hudson_sun.publish(:print_news, 'Drew can play a mean trumpet.')
      # Hudson Sun says: Drew can play a mean trumpet.
