.row
  .col-md-12
    %h4 Delegator Pattern
    %p After using the delegator pattern with my Rails apps, I was curious how it might be implemented.  This is a very basic approach to it - literally just passing along the same arguments to the owned object without checking to make sure the object exists or doing anything fancy.
    :coderay
      #!ruby

      class Object

        def self.delegate(*args)
          to = args.pop[:to].to_s

          method_definitions = args.map do |meth|
            string_meth = meth.to_s
            " \
              def \#{string_meth}(*args) \
                \#{to}.\#{string_meth}(*args) \
              end \
            "
          end
          class_eval(method_definitions.join(';'))
        end

      end
    %br
    %p This is a <i>very</i> basic approach to delegation, as I didn't provide any nice features like prefixes on delegated methods.  These come in handy when both the object and one of the objects that you delegate to have a method with the same name.
    %p Continuing along, I'll show a simple example of actually using the delegator shown above:
    %br
    :coderay
      #!ruby

      class Cat
        def purr
          puts 'purr'
        end

        def meow
          puts 'meow'
        end
      end

      class CatOwner
        attr_accessor :cat

        delegate :purr, :meow, to: :cat

        def initialize
          self.cat = Cat.new
        end
      end

      cat_owner = CatOwner.new
      cat_owner.purr  # purr
      cat_owner.meow  # meow
    %br
    %p As you can see, this works pretty much identical to the delegator you'll find in rails.  If we wanted to add prefixing, we could modify the original delegator like so (changes on lines 4, 8, and 10):
    %br
    :coderay
      #!ruby

      def self.delegate(*args)
        options = args.pop
        to = options[:to].to_s
        prefix = options[:prefix] == true

        method_definitions = args.map do |meth|
          string_meth = meth.to_s
          host_meth = prefix ? "\#{to}_\#{string_meth}" : string_meth
          " \
            def \#{host_meth}(*args) \
              \#{to}.\#{string_meth}(*args) \
            end \
          "
        end
        class_eval(method_definitions.join(';'))
      end
