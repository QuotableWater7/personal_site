.app-body
  .container-fluid.content-area
    .row
      .col-md-12
        %span.disclaimer Disclaimer: &nbsp;
        This code isn't particularly groundbreaking, but I'm keeping a list of code I find thought-provoking or useful.
    .row
      .col-md-12
        %h1 JavaScript Snippets
        %br
        %h4 Delegator Pattern
        :coderay
          #!javascript

          /*
           * At work, we had several objects that received a method call and
           * passed that message to one of the objects it was the owner of.
           * Instead of having these custom methods, I wrote a delegator to
           * write those methods automatically.
           */

          Object.prototype.delegate = function (methods, opts) {
            var self = this;
            if (_.isString(methods)) { methods = [methods]; }

            _.each(methods, function (method) {
              self[method] = function () {
                var receiver = self[opts.to];
                return receiver[method].apply(receiver, arguments);
              };
            });
          };

          // simple usage example...
          var musicBox = {
            hendrix: {
              playGuitar: function () { console.log('twanggggg'); }
            }
          }

          musicBox.delegate('playGuitar', { to: 'Hendrix' });
          musicBox.playGuitar();  //  console:  twanggggg
    %br
    .row
      .col-md-12
        %h1 Ruby Snippets
        %br
        %h4 Observer Pattern
        %p I'm basically trying to deepen my understanding of how Ruby does it's magic.  This is a [very] basic implementation of the observer pattern.
        :coderay
          #!ruby

          module Publisher
            module ClassMethods
              def publish(*args)
                subscribers.each { |subscriber| subscriber.notify(*args) }
              end

              def add_subscriber(subscriber)
                subscribers << subscriber
              end

              def remove_subscriber(subscriber)
                subscribers - [subscriber]
              end
            end

            def self.included(base)
              base.class_eval do
                include ClassMethods
                send(:attr_accessor, :subscribers)
              end
            end
          end

          module Subscriber
            module ClassMethods
              def subscribe_to(publisher)
                publisher.add_subscriber(self)
              end

              def unsubscribe_from(publisher)
                publisher.remove_subscriber(self)
              end
            end

            def self.included(base)
              base.class_eval do
                include ClassMethods
              end
            end
          end

          // some simple classes to demonstrate what's happening...
          class Newspaper
            include Publisher

            def initialize
              self.subscribers = []
            end
          end

          class Person
            include Subscriber

            def notify(method, *args)
              send(method, *args)
            end

            def read_news(news)
              puts "Today's news: \#{news}"
            end
          end

          n = Newspaper.new
          p = Person.new

          p.subscribe_to(n)
          n.publish(:read_news, 'You are still alive!')

          # Today's news: You are still alive!
